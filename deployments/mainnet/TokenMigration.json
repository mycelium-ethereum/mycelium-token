{
  "address": "0x279C803E118609591e13e780269Cd7F77DeA0A72",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_myc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tcr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Migrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnedTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "migrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IMigrationNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcr",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fd2d4c8b4d8d463e104f3d739937a197c8b50961ba86688c84b6aea191e7a78",
  "receipt": {
    "to": null,
    "from": "0x0Ecf023Ca0f37a5816039465c305FdB6fEb63204",
    "contractAddress": "0x279C803E118609591e13e780269Cd7F77DeA0A72",
    "transactionIndex": 43,
    "gasUsed": "1600951",
    "logsBloom": "0x
    "blockHash": "0xfcb40610128dd34d3ef07d38196ce2b44c99661f956f42e1a4a0b11b4b4aa6f5",
    "transactionHash": "0x8fd2d4c8b4d8d463e104f3d739937a197c8b50961ba86688c84b6aea191e7a78",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 15317919,
        "transactionHash": "0x8fd2d4c8b4d8d463e104f3d739937a197c8b50961ba86688c84b6aea191e7a78",
        "address": "0x279C803E118609591e13e780269Cd7F77DeA0A72",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000ecf023ca0f37a5816039465c305fdb6feb63204",
          "0x0000000000000000000000000ecf023ca0f37a5816039465c305fdb6feb63204"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0xfcb40610128dd34d3ef07d38196ce2b44c99661f956f42e1a4a0b11b4b4aa6f5"
      }
    ],
    "blockNumber": 15317919,
    "cumulativeGasUsed": "6400079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0Ecf023Ca0f37a5816039465c305FdB6fEb63204",
    "0x4b13006980aCB09645131b91D259eaA111eaF5Ba",
    "0x9C4A4204B79dd291D6b6571C5BE8BbcD0622F050"
  ],
  "numDeployments": 1,
  "solcInputHash": "8133f454abd579e32cb7c4debd563718",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tcr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"migrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMigrationNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"raymogg\",\"details\":\"All burned TCR will be held in the contract.\",\"events\":{\"Migrated(address,address,uint256)\":{\"details\":\"`amount` will be the same for TCR and MYC tokens as migration is done at a 1:1 ratio.\",\"params\":{\"amount\":\"The amount of TCR or MYC tokens.\",\"from\":\"The sender of the TCR tokens.\",\"to\":\"The recipient of the MYC tokens.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_myc\":\"The MYC token address.\",\"_tcr\":\"The TCR token address.\",\"admin\":\"The address to whom the `DEFAULT_ADMIN_ROLE` role will be assigned.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"migrate(uint256)\":{\"params\":{\"amount\":\"The amount of TCR to be burnt, and thus MYC to be minted.\"}},\"migrateTo(uint256,address)\":{\"params\":{\"amount\":\"The amount of TCR to be burnt, and thus MYC to be minted.\",\"to\":\"The recipient address of the minted MYC tokens.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setNFTContract(address)\":{\"custom:requirements\":\"The contract at address `_nft` must implement the IMigrationNFT interface.`msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.\",\"params\":{\"_nft\":\"Address to be used to mint the NFTs.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawTokens(address)\":{\"custom:requirements\":\"`msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.\",\"details\":\"Does not check if tokens were sent by mistake or properly migrated.\",\"params\":{\"token\":\"The ERC20 token address to transfer out of this contract address.\"}}},\"title\":\"A TCR token to MYC token migration contract.\",\"version\":1},\"userdoc\":{\"events\":{\"Migrated(address,address,uint256)\":{\"notice\":\"Emits when some TCR tokens are migrated to MYC tokens.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Sets up the `DEFAULT_ADMIN_ROLE` role and assigns values for the MYC and TCR tokens.\"},\"migrate(uint256)\":{\"notice\":\"Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a the calling address.\"},\"migrateTo(uint256,address)\":{\"notice\":\"Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a specified address.\"},\"setNFTContract(address)\":{\"notice\":\"Set the migration NFT contract address.\"},\"withdrawTokens(address)\":{\"notice\":\"Safety function to allow an admin to withdraw any tokens accidently sent to this contract.\"}},\"notice\":\"Allows users to call the `migrate` function, exchanging TCR for MYC at a 1:1 ratio.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenMigration.sol\":\"TokenMigration\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TokenMigration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IMigrationNFT.sol\\\";\\nimport \\\"./interfaces/IMYCToken.sol\\\";\\n\\n/**\\n * @title A TCR token to MYC token migration contract.\\n * @author raymogg\\n * @notice Allows users to call the `migrate` function, exchanging TCR for MYC at a 1:1 ratio.\\n * @dev All burned TCR will be held in the contract.\\n */\\ncontract TokenMigration is AccessControl {\\n    address public immutable myc;\\n    IERC20 public immutable tcr;\\n    IMigrationNFT public nft;\\n    mapping(address => bool) public mintedNFT;\\n    // total amount of TCR successfully burned\\n    uint256 public burnedTCR;\\n\\n    /**\\n     * @notice Emits when some TCR tokens are migrated to MYC tokens.\\n     * @param from The sender of the TCR tokens.\\n     * @param to The recipient of the MYC tokens.\\n     * @param amount The amount of TCR or MYC tokens.\\n     * @dev `amount` will be the same for TCR and MYC tokens as migration is done at a 1:1 ratio.\\n     */\\n    event Migrated(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Sets up the `DEFAULT_ADMIN_ROLE` role and assigns values for the MYC and TCR tokens.\\n     * @param admin The address to whom the `DEFAULT_ADMIN_ROLE` role will be assigned.\\n     * @param _myc The MYC token address.\\n     * @param _tcr The TCR token address.\\n     */\\n    constructor(\\n        address admin,\\n        address _myc,\\n        address _tcr\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        myc = _myc;\\n        tcr = IERC20(_tcr);\\n    }\\n\\n    /**\\n     * @notice Set the migration NFT contract address.\\n     * @param _nft Address to be used to mint the NFTs.\\n     * @custom:requirements The contract at address `_nft` must implement the IMigrationNFT interface.\\n     * @custom:requirements `msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.\\n     */\\n    function setNFTContract(address _nft) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT_ADMIN\\\");\\n        nft = IMigrationNFT(_nft);\\n    }\\n\\n    /**\\n     * @notice Safety function to allow an admin to withdraw any tokens accidently sent to this contract.\\n     * @param token The ERC20 token address to transfer out of this contract address.\\n     * @dev Does not check if tokens were sent by mistake or properly migrated.\\n     * @custom:requirements `msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.\\n     */\\n    function withdrawTokens(address token) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT_ADMIN\\\");\\n        IERC20(token).transfer(\\n            msg.sender,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @notice Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a specified address.\\n     * @param amount The amount of TCR to be burnt, and thus MYC to be minted.\\n     * @param to The recipient address of the minted MYC tokens.\\n     */\\n    function migrateTo(uint256 amount, address to) external {\\n        require(to != address(0), \\\"Migrating to 0 address\\\");\\n        _migrate(amount, to, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a the calling address.\\n     * @param amount The amount of TCR to be burnt, and thus MYC to be minted.\\n     */\\n    function migrate(uint256 amount) external {\\n        _migrate(amount, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Allows the exchange of TCR for MYC at a 1:1 ratio.\\n     * @param amount The amount of TCR that is being migrated to MYC.\\n     * @param to The recipient address of MYC tokens.\\n     * @param from The address burning their TCR.\\n     * @dev This contract holds migrated TCR and mints fresh MYC to the `to` address.\\n     * @dev Emits a `Migrated` event.\\n     * @custom:requirement `mintingPaused == false`.\\n     * @custom:requirement `amount > 0`.\\n     */\\n    function _migrate(\\n        uint256 amount,\\n        address to,\\n        address from\\n    ) private {\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        // todo: add counter for amount of tokens \\\"burned\\\" via migration\\n        bool success = tcr.transferFrom(from, address(this), amount);\\n        require(success, \\\"XFER_ERROR\\\");\\n        burnedTCR += amount;\\n\\n        // will revert if minting is paused\\n        IMYCToken(myc).mint(to, amount);\\n\\n        // issue NFT if this account has not yet migrated before\\n        if (!mintedNFT[to]) {\\n            mintedNFT[to] = true;\\n            nft.mint(to);\\n        }\\n        emit Migrated(from, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x88e557e9b3c42975de1151f7d525b8395009f88661fd4d1fc4427f32a8d9b7e7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMYCToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMYCToken  {\\n    /**\\n    * @notice Returns true if minting is paused on the token.\\n    */\\n    function mintingPaused() external returns(bool);\\n\\n    /**\\n    * @notice mints new MYC tokens\\n    * @param to the receiver of the newly minted tokens\\n    * @param amount the amount of tokens to mint\\n    */\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8332ed15e27334f1466eb81b2d674c893fc2ebacd3be6b9a16112236a067deca\",\"license\":\"MIT\"},\"contracts/interfaces/IMigrationNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMigrationNFT  {\\n    /**\\n    * @notice sets the contract address in charge of executing the minting of NFTs.\\n    * @param _migrateContract the address with permissions to call the mintNFT function\\n    */\\n    function setMinterAddress(address _migrateContract) external;\\n    \\n    /**\\n    * @notice mints a single migration NFT to the to address\\n    * @param _to the receiver of the NFT.\\n    */\\n    function mint(address _to) external;\\n}\\n\",\"keccak256\":\"0x030dd9edf9cafd3029a953d07cbf004232a18099560f4cc7d699adf077df2ce4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80637da68f1011610097578063a7ccabdf11610066578063a7ccabdf146102ab578063c438aeb5146102c7578063d547741f146102e5578063e771640a1461030157610100565b80637da68f101461020f5780638a98e96a1461023f57806391d148541461025d578063a217fddf1461028d57610100565b8063454b0608116100d3578063454b06081461019d57806347ccca02146101b957806349df728c146101d75780636bcea701146101f357610100565b806301ffc9a714610105578063248a9ca3146101355780632f2ff15d1461016557806336568abe14610181575b600080fd5b61011f600480360381019061011a91906110ff565b61031f565b60405161012c9190611147565b60405180910390f35b61014f600480360381019061014a9190611198565b610399565b60405161015c91906111d4565b60405180910390f35b61017f600480360381019061017a919061124d565b6103b8565b005b61019b6004803603810190610196919061124d565b6103d9565b005b6101b760048036038101906101b291906112c3565b61045c565b005b6101c161046a565b6040516101ce919061134f565b60405180910390f35b6101f160048036038101906101ec919061136a565b610490565b005b61020d60048036038101906102089190611397565b6105f5565b005b6102296004803603810190610224919061136a565b610674565b6040516102369190611147565b60405180910390f35b610247610694565b60405161025491906113e6565b60405180910390f35b6102776004803603810190610272919061124d565b6106b8565b6040516102849190611147565b60405180910390f35b610295610722565b6040516102a291906111d4565b60405180910390f35b6102c560048036038101906102c0919061136a565b610729565b005b6102cf6107b9565b6040516102dc9190611422565b60405180910390f35b6102ff60048036038101906102fa919061124d565b6107dd565b005b6103096107fe565b604051610316919061144c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610392575061039182610804565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6103c182610399565b6103ca8161086e565b6103d48383610882565b505050565b6103e1610962565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461044e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610445906114ea565b60405180910390fd5b610458828261096a565b5050565b610467813333610a4b565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61049d6000801b336106b8565b6104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390611556565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161053291906113e6565b60206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610582919061158b565b6040518363ffffffff1660e01b815260040161059f9291906115b8565b602060405180830381600087803b1580156105b957600080fd5b505af11580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f1919061160d565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90611686565b60405180910390fd5b610670828233610a4b565b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107366000801b336106b8565b610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c90611556565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6107e682610399565b6107ef8161086e565b6107f9838361096a565b505050565b60035481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61087f8161087a610962565b610dc9565b50565b61088c82826106b8565b61095e57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610903610962565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b61097482826106b8565b15610a4757600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109ec610962565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008311610a8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a85906116f2565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330876040518463ffffffff1660e01b8152600401610aed93929190611712565b602060405180830381600087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f919061160d565b905080610b81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7890611795565b60405180910390fd5b8360036000828254610b9391906117e4565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1984866040518363ffffffff1660e01b8152600401610bf59291906115b8565b600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d5e576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a627842846040518263ffffffff1660e01b8152600401610d2b91906113e6565b600060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050505b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f928fd5531324ee87d76cc5307dc37580174da76b85cd546da631b2670bc266b586604051610dbb919061144c565b60405180910390a350505050565b610dd382826106b8565b610e6257610df88173ffffffffffffffffffffffffffffffffffffffff166014610e66565b610e068360001c6020610e66565b604051602001610e1792919061194c565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5991906119d0565b60405180910390fd5b5050565b606060006002836002610e7991906119f2565b610e8391906117e4565b67ffffffffffffffff811115610e9c57610e9b611a4c565b5b6040519080825280601f01601f191660200182016040528015610ece5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f0657610f05611a7b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610f6a57610f69611a7b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610faa91906119f2565b610fb491906117e4565b90505b6001811115611054577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610ff657610ff5611a7b565b5b1a60f81b82828151811061100d5761100c611a7b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061104d90611aaa565b9050610fb7565b5060008414611098576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108f90611b20565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6110dc816110a7565b81146110e757600080fd5b50565b6000813590506110f9816110d3565b92915050565b600060208284031215611115576111146110a2565b5b6000611123848285016110ea565b91505092915050565b60008115159050919050565b6111418161112c565b82525050565b600060208201905061115c6000830184611138565b92915050565b6000819050919050565b61117581611162565b811461118057600080fd5b50565b6000813590506111928161116c565b92915050565b6000602082840312156111ae576111ad6110a2565b5b60006111bc84828501611183565b91505092915050565b6111ce81611162565b82525050565b60006020820190506111e960008301846111c5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061121a826111ef565b9050919050565b61122a8161120f565b811461123557600080fd5b50565b60008135905061124781611221565b92915050565b60008060408385031215611264576112636110a2565b5b600061127285828601611183565b925050602061128385828601611238565b9150509250929050565b6000819050919050565b6112a08161128d565b81146112ab57600080fd5b50565b6000813590506112bd81611297565b92915050565b6000602082840312156112d9576112d86110a2565b5b60006112e7848285016112ae565b91505092915050565b6000819050919050565b600061131561131061130b846111ef565b6112f0565b6111ef565b9050919050565b6000611327826112fa565b9050919050565b60006113398261131c565b9050919050565b6113498161132e565b82525050565b60006020820190506113646000830184611340565b92915050565b6000602082840312156113805761137f6110a2565b5b600061138e84828501611238565b91505092915050565b600080604083850312156113ae576113ad6110a2565b5b60006113bc858286016112ae565b92505060206113cd85828601611238565b9150509250929050565b6113e08161120f565b82525050565b60006020820190506113fb60008301846113d7565b92915050565b600061140c8261131c565b9050919050565b61141c81611401565b82525050565b60006020820190506114376000830184611413565b92915050565b6114468161128d565b82525050565b6000602082019050611461600083018461143d565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006114d4602f83611467565b91506114df82611478565b604082019050919050565b60006020820190508181036000830152611503816114c7565b9050919050565b7f4e4f545f41444d494e0000000000000000000000000000000000000000000000600082015250565b6000611540600983611467565b915061154b8261150a565b602082019050919050565b6000602082019050818103600083015261156f81611533565b9050919050565b60008151905061158581611297565b92915050565b6000602082840312156115a1576115a06110a2565b5b60006115af84828501611576565b91505092915050565b60006040820190506115cd60008301856113d7565b6115da602083018461143d565b9392505050565b6115ea8161112c565b81146115f557600080fd5b50565b600081519050611607816115e1565b92915050565b600060208284031215611623576116226110a2565b5b6000611631848285016115f8565b91505092915050565b7f4d6967726174696e6720746f2030206164647265737300000000000000000000600082015250565b6000611670601683611467565b915061167b8261163a565b602082019050919050565b6000602082019050818103600083015261169f81611663565b9050919050565b7f494e56414c49445f414d4f554e54000000000000000000000000000000000000600082015250565b60006116dc600e83611467565b91506116e7826116a6565b602082019050919050565b6000602082019050818103600083015261170b816116cf565b9050919050565b600060608201905061172760008301866113d7565b61173460208301856113d7565b611741604083018461143d565b949350505050565b7f584645525f4552524f5200000000000000000000000000000000000000000000600082015250565b600061177f600a83611467565b915061178a82611749565b602082019050919050565b600060208201905081810360008301526117ae81611772565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006117ef8261128d565b91506117fa8361128d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561182f5761182e6117b5565b5b828201905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061187b60178361183a565b915061188682611845565b601782019050919050565b600081519050919050565b60005b838110156118ba57808201518184015260208101905061189f565b838111156118c9576000848401525b50505050565b60006118da82611891565b6118e4818561183a565b93506118f481856020860161189c565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061193660118361183a565b915061194182611900565b601182019050919050565b60006119578261186e565b915061196382856118cf565b915061196e82611929565b915061197a82846118cf565b91508190509392505050565b6000601f19601f8301169050919050565b60006119a282611891565b6119ac8185611467565b93506119bc81856020860161189c565b6119c581611986565b840191505092915050565b600060208201905081810360008301526119ea8184611997565b905092915050565b60006119fd8261128d565b9150611a088361128d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a4157611a406117b5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ab58261128d565b91506000821415611ac957611ac86117b5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611b0a602083611467565b9150611b1582611ad4565b602082019050919050565b60006020820190508181036000830152611b3981611afd565b905091905056fea264697066735822122042d24369010bd4746ef893cfcb0d2b6e4a857aebe504bbc2415d476be267991864736f6c63430008090033",
  "devdoc": {
    "author": "raymogg",
    "details": "All burned TCR will be held in the contract.",
    "events": {
      "Migrated(address,address,uint256)": {
        "details": "`amount` will be the same for TCR and MYC tokens as migration is done at a 1:1 ratio.",
        "params": {
          "amount": "The amount of TCR or MYC tokens.",
          "from": "The sender of the TCR tokens.",
          "to": "The recipient of the MYC tokens."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_myc": "The MYC token address.",
          "_tcr": "The TCR token address.",
          "admin": "The address to whom the `DEFAULT_ADMIN_ROLE` role will be assigned."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "migrate(uint256)": {
        "params": {
          "amount": "The amount of TCR to be burnt, and thus MYC to be minted."
        }
      },
      "migrateTo(uint256,address)": {
        "params": {
          "amount": "The amount of TCR to be burnt, and thus MYC to be minted.",
          "to": "The recipient address of the minted MYC tokens."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setNFTContract(address)": {
        "custom:requirements": "The contract at address `_nft` must implement the IMigrationNFT interface.`msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.",
        "params": {
          "_nft": "Address to be used to mint the NFTs."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawTokens(address)": {
        "custom:requirements": "`msg.sender` is a member of the `DEFAULT_ADMIN_ROLE` role.",
        "details": "Does not check if tokens were sent by mistake or properly migrated.",
        "params": {
          "token": "The ERC20 token address to transfer out of this contract address."
        }
      }
    },
    "title": "A TCR token to MYC token migration contract.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Migrated(address,address,uint256)": {
        "notice": "Emits when some TCR tokens are migrated to MYC tokens."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Sets up the `DEFAULT_ADMIN_ROLE` role and assigns values for the MYC and TCR tokens."
      },
      "migrate(uint256)": {
        "notice": "Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a the calling address."
      },
      "migrateTo(uint256,address)": {
        "notice": "Migrate `amount` TCR tokens to `amount` MYC tokens, and transfer to a specified address."
      },
      "setNFTContract(address)": {
        "notice": "Set the migration NFT contract address."
      },
      "withdrawTokens(address)": {
        "notice": "Safety function to allow an admin to withdraw any tokens accidently sent to this contract."
      }
    },
    "notice": "Allows users to call the `migrate` function, exchanging TCR for MYC at a 1:1 ratio.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4468,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMigrationNFT)4709"
      },
      {
        "astId": 4472,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "mintedNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4474,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "burnedTCR",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMigrationNFT)4709": {
        "encoding": "inplace",
        "label": "contract IMigrationNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TokenMigration.sol:TokenMigration",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TokenMigration.sol:TokenMigration",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}