{
  "address": "0x3Db587dc8602b0Aa6A014B85A50bdab9d687dbE1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_myc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tcr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Migrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnedTCR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "migrateTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IMigrationNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "setMintingPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nft",
          "type": "address"
        }
      ],
      "name": "setNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tcr",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe330a81596ab72806635278bd6f45cbcb194136ac9793de2783eb1b8effad3b6",
  "receipt": {
    "to": null,
    "from": "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
    "contractAddress": "0x3Db587dc8602b0Aa6A014B85A50bdab9d687dbE1",
    "transactionIndex": 7,
    "gasUsed": "1677155",
    "logsBloom": "0x
    "blockHash": "0x42109956744045d2d8b21f6b970e2285683013e32b9051762723aaf309c8ee67",
    "transactionHash": "0xe330a81596ab72806635278bd6f45cbcb194136ac9793de2783eb1b8effad3b6",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 7349049,
        "transactionHash": "0xe330a81596ab72806635278bd6f45cbcb194136ac9793de2783eb1b8effad3b6",
        "address": "0x3Db587dc8602b0Aa6A014B85A50bdab9d687dbE1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fb59b91646cd0890f3e5343384feb746989b66c7",
          "0x000000000000000000000000fb59b91646cd0890f3e5343384feb746989b66c7"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0x42109956744045d2d8b21f6b970e2285683013e32b9051762723aaf309c8ee67"
      }
    ],
    "blockNumber": 7349049,
    "cumulativeGasUsed": "5146727",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
    "0x7d021A1E42FEbCF5E008CD50EF62Aa53349c1988",
    "0xf42bb5605277Ffc81fbDb938580bdA86AB7cbbde"
  ],
  "numDeployments": 1,
  "solcInputHash": "4fa520548c2f94ea41af52df0d04d9a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_myc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tcr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedTCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"migrateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IMigrationNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintingPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tcr\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setNFTContract(address)\":{\"params\":{\"_nft\":\"address to be used to mint the NFTs. Must support the  IMigrationNFT interface\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawTokens(address)\":{\"details\":\"does not check if tokens were sent by mistake or properly migrated.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setMintingPaused(bool)\":{\"notice\":\"allows an admin to enable and disable migration / minting\"},\"setNFTContract(address)\":{\"notice\":\"allows an admin to set the migration NFT contract address\"},\"withdrawTokens(address)\":{\"notice\":\"safety function to allow an admin to withdraw any tokens accidently sent to this contract.\"}},\"notice\":\"Migration contract supporting the transition from TCR to MYC. Allows users to call the `migrate` function, exchanging TCR to MYC at a 1:1 ratio. All burned TCR will be held in the contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenMigration.sol\":\"TokenMigration\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/TokenMigration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IMigrationNFT.sol\\\";\\n\\ninterface IERC20Mintable {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\n/**\\n* Migration contract supporting the transition from TCR to MYC.\\n* Allows users to call the `migrate` function, exchanging TCR to MYC at a 1:1 ratio.\\n* All burned TCR will be held in the contract.\\n*/\\ncontract TokenMigration is AccessControl {\\n    IERC20 public immutable myc;\\n    IERC20 public immutable tcr;\\n    IMigrationNFT public nft;\\n    bool public mintingPaused;\\n    mapping(address => bool) public mintedNFT;\\n    // total amount of TCR successfully burned\\n    uint256 public burnedTCR;\\n\\n    event Migrated(address, uint256);\\n\\n    constructor(\\n        address admin,\\n        address _myc,\\n        address _tcr\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n        myc = IERC20(_myc);\\n        tcr = IERC20(_tcr);\\n    }\\n\\n    /**\\n    * @notice allows an admin to set the migration NFT contract address\\n    * @param _nft address to be used to mint the NFTs. Must support the \\n    * IMigrationNFT interface\\n    */\\n    function setNFTContract(address _nft) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT_ADMIN\\\");\\n        nft = IMigrationNFT(_nft);\\n    }\\n\\n    /**\\n    * @notice allows an admin to enable and disable migration / minting\\n    */\\n    function setMintingPaused(bool state) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT_ADMIN\\\");\\n        mintingPaused = state;\\n    }\\n\\n    /**\\n    * @notice safety function to allow an admin to withdraw any tokens accidently sent to this contract.\\n    * @dev does not check if tokens were sent by mistake or properly migrated.\\n    */\\n    function withdrawTokens(address token) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT_ADMIN\\\");\\n        IERC20(token).transfer(\\n            msg.sender,\\n            IERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    function migrateTo(uint256 amount, address to) external {\\n        require(to != address(0), \\\"Migrating to 0 address\\\");\\n        _migrate(amount, to, msg.sender);\\n    }\\n\\n    function migrate(uint256 amount) external {\\n        _migrate(amount, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n    * @notice allows the exchange of TCR for MYC at a 1:1 ratio.\\n    * holds migrated TCR in this contract and mints fresh MYC to the to address.\\n    * @param amount the amount of TCR that is being burned\\n    * @param to the receiver of MYC\\n    * @param from the burner of TCR\\n    */\\n    function _migrate(\\n        uint256 amount,\\n        address to,\\n        address from\\n    ) internal {\\n        require(!mintingPaused, \\\"MINTING_PAUSED\\\");\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n        // todo: add counter for amount of tokens \\\"burned\\\" via migration\\n        bool success = tcr.transferFrom(from, address(this), amount);\\n        require(success, \\\"XFER_ERROR\\\");\\n        burnedTCR += amount;\\n        IERC20Mintable(address(myc)).mint(to, amount);\\n        \\n        // issue NFT if this account has not yet migrated before\\n        if (!mintedNFT[to]) {\\n            mintedNFT[to] = true;\\n            nft.mintNFT(to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d9955aac6bf3c0a248f38c869b104c4394a34c3a35add9f3b713701edbf48d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMigrationNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IMigrationNFT  {\\n    /**\\n    * @notice sets the contract address in charge of executing the minting of NFTs.\\n    * @param _migrateContract the address with permissions to call the mintNFT function\\n    */\\n    function setMinterAddress(address _migrateContract) external;\\n    \\n    /**\\n    * @notice mints a single migration NFT to the to address\\n    * @param _to the receiver of the NFT.\\n    */\\n    function mintNFT(address _to) external;\\n}\\n\",\"keccak256\":\"0x8e76b4e9fe0eb134241b25865a50592c525270a3295e62321e3f69778e28fe2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200200b3803806200200b8339818101604052810190620000379190620002a0565b6200004c6000801b84620000bd60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620002fc565b620000cf8282620000d360201b60201c565b5050565b620000e58282620001c460201b60201c565b620001c057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001656200022e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000268826200023b565b9050919050565b6200027a816200025b565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b600080600060608486031215620002bc57620002bb62000236565b5b6000620002cc8682870162000289565b9350506020620002df8682870162000289565b9250506040620002f28682870162000289565b9150509250925092565b60805160a051611cdb62000330600039600081816108740152610bae0152600081816106e60152610cb80152611cdb6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638a98e96a116100a2578063ad13419d11610071578063ad13419d146102dd578063c438aeb5146102f9578063d547741f14610317578063e1a283d614610333578063e771640a1461035157610116565b80638a98e96a1461025557806391d1485414610273578063a217fddf146102a3578063a7ccabdf146102c157610116565b8063454b0608116100e9578063454b0608146101b357806347ccca02146101cf57806349df728c146101ed5780636bcea701146102095780637da68f101461022557610116565b806301ffc9a71461011b578063248a9ca31461014b5780632f2ff15d1461017b57806336568abe14610197575b600080fd5b610135600480360381019061013091906111b6565b61036f565b60405161014291906111fe565b60405180910390f35b6101656004803603810190610160919061124f565b6103e9565b604051610172919061128b565b60405180910390f35b61019560048036038101906101909190611304565b610408565b005b6101b160048036038101906101ac9190611304565b610429565b005b6101cd60048036038101906101c8919061137a565b6104ac565b005b6101d76104ba565b6040516101e49190611406565b60405180910390f35b61020760048036038101906102029190611421565b6104e0565b005b610223600480360381019061021e919061144e565b610645565b005b61023f600480360381019061023a9190611421565b6106c4565b60405161024c91906111fe565b60405180910390f35b61025d6106e4565b60405161026a91906114af565b60405180910390f35b61028d60048036038101906102889190611304565b610708565b60405161029a91906111fe565b60405180910390f35b6102ab610772565b6040516102b8919061128b565b60405180910390f35b6102db60048036038101906102d69190611421565b610779565b005b6102f760048036038101906102f291906114f6565b610809565b005b610301610872565b60405161030e91906114af565b60405180910390f35b610331600480360381019061032c9190611304565b610896565b005b61033b6108b7565b60405161034891906111fe565b60405180910390f35b6103596108ca565b6040516103669190611532565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e257506103e1826108d0565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b610411826103e9565b61041a8161093a565b610424838361094e565b505050565b610431610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461049e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610495906115d0565b60405180910390fd5b6104a88282610a36565b5050565b6104b7813333610b17565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ed6000801b33610708565b61052c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105239061163c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610582919061166b565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d2919061169b565b6040518363ffffffff1660e01b81526004016105ef9291906116c8565b602060405180830381600087803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190611706565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac9061177f565b60405180910390fd5b6106c0828233610b17565b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107866000801b33610708565b6107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc9061163c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108166000801b33610708565b610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c9061163c565b60405180910390fd5b80600160146101000a81548160ff02191690831515021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61089f826103e9565b6108a88161093a565b6108b28383610a36565b505050565b600160149054906101000a900460ff1681565b60035481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61094b81610946610a2e565b610e80565b50565b6109588282610708565b610a2a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109cf610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610a408282610708565b15610b1357600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ab8610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600160149054906101000a900460ff1615610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e906117eb565b60405180910390fd5b60008311610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190611857565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330876040518463ffffffff1660e01b8152600401610c0993929190611877565b602060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190611706565b905080610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c94906118fa565b60405180910390fd5b8360036000828254610caf9190611949565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1984866040518363ffffffff1660e01b8152600401610d119291906116c8565b600060405180830381600087803b158015610d2b57600080fd5b505af1158015610d3f573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e7a576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354ba0f27846040518263ffffffff1660e01b8152600401610e47919061166b565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b505050505b50505050565b610e8a8282610708565b610f1957610eaf8173ffffffffffffffffffffffffffffffffffffffff166014610f1d565b610ebd8360001c6020610f1d565b604051602001610ece929190611ab1565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f109190611b35565b60405180910390fd5b5050565b606060006002836002610f309190611b57565b610f3a9190611949565b67ffffffffffffffff811115610f5357610f52611bb1565b5b6040519080825280601f01601f191660200182016040528015610f855781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610fbd57610fbc611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061102157611020611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026110619190611b57565b61106b9190611949565b90505b600181111561110b577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106110ad576110ac611be0565b5b1a60f81b8282815181106110c4576110c3611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061110490611c0f565b905061106e565b506000841461114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690611c85565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111938161115e565b811461119e57600080fd5b50565b6000813590506111b08161118a565b92915050565b6000602082840312156111cc576111cb611159565b5b60006111da848285016111a1565b91505092915050565b60008115159050919050565b6111f8816111e3565b82525050565b600060208201905061121360008301846111ef565b92915050565b6000819050919050565b61122c81611219565b811461123757600080fd5b50565b60008135905061124981611223565b92915050565b60006020828403121561126557611264611159565b5b60006112738482850161123a565b91505092915050565b61128581611219565b82525050565b60006020820190506112a0600083018461127c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112d1826112a6565b9050919050565b6112e1816112c6565b81146112ec57600080fd5b50565b6000813590506112fe816112d8565b92915050565b6000806040838503121561131b5761131a611159565b5b60006113298582860161123a565b925050602061133a858286016112ef565b9150509250929050565b6000819050919050565b61135781611344565b811461136257600080fd5b50565b6000813590506113748161134e565b92915050565b6000602082840312156113905761138f611159565b5b600061139e84828501611365565b91505092915050565b6000819050919050565b60006113cc6113c76113c2846112a6565b6113a7565b6112a6565b9050919050565b60006113de826113b1565b9050919050565b60006113f0826113d3565b9050919050565b611400816113e5565b82525050565b600060208201905061141b60008301846113f7565b92915050565b60006020828403121561143757611436611159565b5b6000611445848285016112ef565b91505092915050565b6000806040838503121561146557611464611159565b5b600061147385828601611365565b9250506020611484858286016112ef565b9150509250929050565b6000611499826113d3565b9050919050565b6114a98161148e565b82525050565b60006020820190506114c460008301846114a0565b92915050565b6114d3816111e3565b81146114de57600080fd5b50565b6000813590506114f0816114ca565b92915050565b60006020828403121561150c5761150b611159565b5b600061151a848285016114e1565b91505092915050565b61152c81611344565b82525050565b60006020820190506115476000830184611523565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006115ba602f8361154d565b91506115c58261155e565b604082019050919050565b600060208201905081810360008301526115e9816115ad565b9050919050565b7f4e4f545f41444d494e0000000000000000000000000000000000000000000000600082015250565b600061162660098361154d565b9150611631826115f0565b602082019050919050565b6000602082019050818103600083015261165581611619565b9050919050565b611665816112c6565b82525050565b6000602082019050611680600083018461165c565b92915050565b6000815190506116958161134e565b92915050565b6000602082840312156116b1576116b0611159565b5b60006116bf84828501611686565b91505092915050565b60006040820190506116dd600083018561165c565b6116ea6020830184611523565b9392505050565b600081519050611700816114ca565b92915050565b60006020828403121561171c5761171b611159565b5b600061172a848285016116f1565b91505092915050565b7f4d6967726174696e6720746f2030206164647265737300000000000000000000600082015250565b600061176960168361154d565b915061177482611733565b602082019050919050565b600060208201905081810360008301526117988161175c565b9050919050565b7f4d494e54494e475f504155534544000000000000000000000000000000000000600082015250565b60006117d5600e8361154d565b91506117e08261179f565b602082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b7f494e56414c49445f414d4f554e54000000000000000000000000000000000000600082015250565b6000611841600e8361154d565b915061184c8261180b565b602082019050919050565b6000602082019050818103600083015261187081611834565b9050919050565b600060608201905061188c600083018661165c565b611899602083018561165c565b6118a66040830184611523565b949350505050565b7f584645525f4552524f5200000000000000000000000000000000000000000000600082015250565b60006118e4600a8361154d565b91506118ef826118ae565b602082019050919050565b60006020820190508181036000830152611913816118d7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061195482611344565b915061195f83611344565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119945761199361191a565b5b828201905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006119e060178361199f565b91506119eb826119aa565b601782019050919050565b600081519050919050565b60005b83811015611a1f578082015181840152602081019050611a04565b83811115611a2e576000848401525b50505050565b6000611a3f826119f6565b611a49818561199f565b9350611a59818560208601611a01565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611a9b60118361199f565b9150611aa682611a65565b601182019050919050565b6000611abc826119d3565b9150611ac88285611a34565b9150611ad382611a8e565b9150611adf8284611a34565b91508190509392505050565b6000601f19601f8301169050919050565b6000611b07826119f6565b611b11818561154d565b9350611b21818560208601611a01565b611b2a81611aeb565b840191505092915050565b60006020820190508181036000830152611b4f8184611afc565b905092915050565b6000611b6282611344565b9150611b6d83611344565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ba657611ba561191a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611c1a82611344565b91506000821415611c2e57611c2d61191a565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611c6f60208361154d565b9150611c7a82611c39565b602082019050919050565b60006020820190508181036000830152611c9e81611c62565b905091905056fea26469706673582212200488031e3da0066b569d26a84f82878d9bf039707dbf7c99b4d9ba7bf9cab8da64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638a98e96a116100a2578063ad13419d11610071578063ad13419d146102dd578063c438aeb5146102f9578063d547741f14610317578063e1a283d614610333578063e771640a1461035157610116565b80638a98e96a1461025557806391d1485414610273578063a217fddf146102a3578063a7ccabdf146102c157610116565b8063454b0608116100e9578063454b0608146101b357806347ccca02146101cf57806349df728c146101ed5780636bcea701146102095780637da68f101461022557610116565b806301ffc9a71461011b578063248a9ca31461014b5780632f2ff15d1461017b57806336568abe14610197575b600080fd5b610135600480360381019061013091906111b6565b61036f565b60405161014291906111fe565b60405180910390f35b6101656004803603810190610160919061124f565b6103e9565b604051610172919061128b565b60405180910390f35b61019560048036038101906101909190611304565b610408565b005b6101b160048036038101906101ac9190611304565b610429565b005b6101cd60048036038101906101c8919061137a565b6104ac565b005b6101d76104ba565b6040516101e49190611406565b60405180910390f35b61020760048036038101906102029190611421565b6104e0565b005b610223600480360381019061021e919061144e565b610645565b005b61023f600480360381019061023a9190611421565b6106c4565b60405161024c91906111fe565b60405180910390f35b61025d6106e4565b60405161026a91906114af565b60405180910390f35b61028d60048036038101906102889190611304565b610708565b60405161029a91906111fe565b60405180910390f35b6102ab610772565b6040516102b8919061128b565b60405180910390f35b6102db60048036038101906102d69190611421565b610779565b005b6102f760048036038101906102f291906114f6565b610809565b005b610301610872565b60405161030e91906114af565b60405180910390f35b610331600480360381019061032c9190611304565b610896565b005b61033b6108b7565b60405161034891906111fe565b60405180910390f35b6103596108ca565b6040516103669190611532565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e257506103e1826108d0565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b610411826103e9565b61041a8161093a565b610424838361094e565b505050565b610431610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461049e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610495906115d0565b60405180910390fd5b6104a88282610a36565b5050565b6104b7813333610b17565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104ed6000801b33610708565b61052c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105239061163c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610582919061166b565b60206040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d2919061169b565b6040518363ffffffff1660e01b81526004016105ef9291906116c8565b602060405180830381600087803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106419190611706565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ac9061177f565b60405180910390fd5b6106c0828233610b17565b5050565b60026020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b6107866000801b33610708565b6107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc9061163c565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108166000801b33610708565b610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c9061163c565b60405180910390fd5b80600160146101000a81548160ff02191690831515021790555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61089f826103e9565b6108a88161093a565b6108b28383610a36565b505050565b600160149054906101000a900460ff1681565b60035481565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61094b81610946610a2e565b610e80565b50565b6109588282610708565b610a2a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109cf610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b610a408282610708565b15610b1357600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610ab8610a2e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600160149054906101000a900460ff1615610b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5e906117eb565b60405180910390fd5b60008311610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba190611857565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330876040518463ffffffff1660e01b8152600401610c0993929190611877565b602060405180830381600087803b158015610c2357600080fd5b505af1158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190611706565b905080610c9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c94906118fa565b60405180910390fd5b8360036000828254610caf9190611949565b925050819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1984866040518363ffffffff1660e01b8152600401610d119291906116c8565b600060405180830381600087803b158015610d2b57600080fd5b505af1158015610d3f573d6000803e3d6000fd5b50505050600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e7a576001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354ba0f27846040518263ffffffff1660e01b8152600401610e47919061166b565b600060405180830381600087803b158015610e6157600080fd5b505af1158015610e75573d6000803e3d6000fd5b505050505b50505050565b610e8a8282610708565b610f1957610eaf8173ffffffffffffffffffffffffffffffffffffffff166014610f1d565b610ebd8360001c6020610f1d565b604051602001610ece929190611ab1565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f109190611b35565b60405180910390fd5b5050565b606060006002836002610f309190611b57565b610f3a9190611949565b67ffffffffffffffff811115610f5357610f52611bb1565b5b6040519080825280601f01601f191660200182016040528015610f855781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610fbd57610fbc611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061102157611020611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026110619190611b57565b61106b9190611949565b90505b600181111561110b577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106110ad576110ac611be0565b5b1a60f81b8282815181106110c4576110c3611be0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061110490611c0f565b905061106e565b506000841461114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690611c85565b60405180910390fd5b8091505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111938161115e565b811461119e57600080fd5b50565b6000813590506111b08161118a565b92915050565b6000602082840312156111cc576111cb611159565b5b60006111da848285016111a1565b91505092915050565b60008115159050919050565b6111f8816111e3565b82525050565b600060208201905061121360008301846111ef565b92915050565b6000819050919050565b61122c81611219565b811461123757600080fd5b50565b60008135905061124981611223565b92915050565b60006020828403121561126557611264611159565b5b60006112738482850161123a565b91505092915050565b61128581611219565b82525050565b60006020820190506112a0600083018461127c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112d1826112a6565b9050919050565b6112e1816112c6565b81146112ec57600080fd5b50565b6000813590506112fe816112d8565b92915050565b6000806040838503121561131b5761131a611159565b5b60006113298582860161123a565b925050602061133a858286016112ef565b9150509250929050565b6000819050919050565b61135781611344565b811461136257600080fd5b50565b6000813590506113748161134e565b92915050565b6000602082840312156113905761138f611159565b5b600061139e84828501611365565b91505092915050565b6000819050919050565b60006113cc6113c76113c2846112a6565b6113a7565b6112a6565b9050919050565b60006113de826113b1565b9050919050565b60006113f0826113d3565b9050919050565b611400816113e5565b82525050565b600060208201905061141b60008301846113f7565b92915050565b60006020828403121561143757611436611159565b5b6000611445848285016112ef565b91505092915050565b6000806040838503121561146557611464611159565b5b600061147385828601611365565b9250506020611484858286016112ef565b9150509250929050565b6000611499826113d3565b9050919050565b6114a98161148e565b82525050565b60006020820190506114c460008301846114a0565b92915050565b6114d3816111e3565b81146114de57600080fd5b50565b6000813590506114f0816114ca565b92915050565b60006020828403121561150c5761150b611159565b5b600061151a848285016114e1565b91505092915050565b61152c81611344565b82525050565b60006020820190506115476000830184611523565b92915050565b600082825260208201905092915050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b60006115ba602f8361154d565b91506115c58261155e565b604082019050919050565b600060208201905081810360008301526115e9816115ad565b9050919050565b7f4e4f545f41444d494e0000000000000000000000000000000000000000000000600082015250565b600061162660098361154d565b9150611631826115f0565b602082019050919050565b6000602082019050818103600083015261165581611619565b9050919050565b611665816112c6565b82525050565b6000602082019050611680600083018461165c565b92915050565b6000815190506116958161134e565b92915050565b6000602082840312156116b1576116b0611159565b5b60006116bf84828501611686565b91505092915050565b60006040820190506116dd600083018561165c565b6116ea6020830184611523565b9392505050565b600081519050611700816114ca565b92915050565b60006020828403121561171c5761171b611159565b5b600061172a848285016116f1565b91505092915050565b7f4d6967726174696e6720746f2030206164647265737300000000000000000000600082015250565b600061176960168361154d565b915061177482611733565b602082019050919050565b600060208201905081810360008301526117988161175c565b9050919050565b7f4d494e54494e475f504155534544000000000000000000000000000000000000600082015250565b60006117d5600e8361154d565b91506117e08261179f565b602082019050919050565b60006020820190508181036000830152611804816117c8565b9050919050565b7f494e56414c49445f414d4f554e54000000000000000000000000000000000000600082015250565b6000611841600e8361154d565b915061184c8261180b565b602082019050919050565b6000602082019050818103600083015261187081611834565b9050919050565b600060608201905061188c600083018661165c565b611899602083018561165c565b6118a66040830184611523565b949350505050565b7f584645525f4552524f5200000000000000000000000000000000000000000000600082015250565b60006118e4600a8361154d565b91506118ef826118ae565b602082019050919050565b60006020820190508181036000830152611913816118d7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061195482611344565b915061195f83611344565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119945761199361191a565b5b828201905092915050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006119e060178361199f565b91506119eb826119aa565b601782019050919050565b600081519050919050565b60005b83811015611a1f578082015181840152602081019050611a04565b83811115611a2e576000848401525b50505050565b6000611a3f826119f6565b611a49818561199f565b9350611a59818560208601611a01565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b6000611a9b60118361199f565b9150611aa682611a65565b601182019050919050565b6000611abc826119d3565b9150611ac88285611a34565b9150611ad382611a8e565b9150611adf8284611a34565b91508190509392505050565b6000601f19601f8301169050919050565b6000611b07826119f6565b611b11818561154d565b9350611b21818560208601611a01565b611b2a81611aeb565b840191505092915050565b60006020820190508181036000830152611b4f8184611afc565b905092915050565b6000611b6282611344565b9150611b6d83611344565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ba657611ba561191a565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611c1a82611344565b91506000821415611c2e57611c2d61191a565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611c6f60208361154d565b9150611c7a82611c39565b602082019050919050565b60006020820190508181036000830152611c9e81611c62565b905091905056fea26469706673582212200488031e3da0066b569d26a84f82878d9bf039707dbf7c99b4d9ba7bf9cab8da64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setNFTContract(address)": {
        "params": {
          "_nft": "address to be used to mint the NFTs. Must support the  IMigrationNFT interface"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdrawTokens(address)": {
        "details": "does not check if tokens were sent by mistake or properly migrated."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setMintingPaused(bool)": {
        "notice": "allows an admin to enable and disable migration / minting"
      },
      "setNFTContract(address)": {
        "notice": "allows an admin to set the migration NFT contract address"
      },
      "withdrawTokens(address)": {
        "notice": "safety function to allow an admin to withdraw any tokens accidently sent to this contract."
      }
    },
    "notice": "Migration contract supporting the transition from TCR to MYC. Allows users to call the `migrate` function, exchanging TCR to MYC at a 1:1 ratio. All burned TCR will be held in the contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3191,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMigrationNFT)3436"
      },
      {
        "astId": 3193,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "mintingPaused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3197,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "mintedNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3199,
        "contract": "contracts/TokenMigration.sol:TokenMigration",
        "label": "burnedTCR",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IMigrationNFT)3436": {
        "encoding": "inplace",
        "label": "contract IMigrationNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TokenMigration.sol:TokenMigration",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TokenMigration.sol:TokenMigration",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}